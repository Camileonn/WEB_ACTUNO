name: CI/CD Backend - Build and Push Docker Image

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*' # Corregido a v*.*.* para coincidir con la tarea
    paths:
      - 'backend/**' # Filtro por ruta

env:
  # Definición del repositorio en MINÚSCULAS para evitar errores de GHCR
  IMAGE_NAME: backend-api 
  GHCR_REPOSITORY: ghcr.io/camileonn/web_act1/${{ env.IMAGE_NAME }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # Permiso necesario para subir a ghcr.io

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Usa docker/metadata-action para generar automáticamente los tags (v1.0.0, latest, sha)
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GHCR_REPOSITORY }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }} # Tag 'latest' solo en push a main
            type=semver,pattern=v{{version}} # Tag v.*.*.* si existe un tag de Git
            type=sha,prefix=sha- # Tag de respaldo

      # Usa docker/build-push-action, que es más eficiente para builds y tags múltiples
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./backend/Dockerfile # Construye desde el directorio backend/
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha # Uso de caché
          cache-to: type=gha,mode=max
